# GitLab CI/CD Pipeline for SageMaker ML Training and Deployment
# This pipeline automatically trains models and deploys endpoints on every commit/merge

stages:
  - validate
  - train
  - package
  - release

variables:
  AWS_DEFAULT_REGION: "us-east-1"
  SAGEMAKER_ROLE_ARN: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/SageMakerExecutionRole"
  S3_BUCKET: "${GITLAB_ARTIFACTS_BUCKET}"
  PYTHON_VERSION: "3.8"

# Cache Python dependencies
cache:
  paths:
    - .venv/
    - __pycache__/

# Base image for all jobs
image: python:${PYTHON_VERSION}

# Stage 1: Code Validation
validate_code:
  stage: validate
  before_script:
    - pip install --upgrade pip
    - pip install flake8 black pytest
  script:
    - echo "Validating code quality..."
    - flake8 train-script/ --max-line-length=88 --extend-ignore=E203,W503 || true
    - black --check train-script/ || true
    - echo "Code validation completed"
  only:
    - branches
    - merge_requests

# Stage 2: Prepare XGBoost Container
prepare_xgboost_container:
  stage: validate
  script:
    - echo "Using AWS pre-built XGBoost container"
    - echo "Container URI: 683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-xgboost:1.7-1"
    - echo "XGBoost container is ready for training"
  only:
    - branches
    - merge_requests

# Stage 3: XGBoost Training Job
train_model:
  stage: train
  before_script:
    - pip install boto3 sagemaker
    - export TRAINING_JOB_NAME="${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-$(date +%Y%m%d-%H%M%S)"
  script:
    - echo "Starting XGBoost training job: $TRAINING_JOB_NAME"
    - python train-script/train.py
        --job-name $TRAINING_JOB_NAME
        --role-arn $SAGEMAKER_ROLE_ARN
        --s3-bucket $S3_BUCKET
        --instance-type ml.m5.large
        --max-runtime 3600
        --num-round 100
        --max-depth 6
        --eta 0.3
        --objective reg:squarederror
    - echo "XGBoost training job completed"
  artifacts:
    paths:
      - training_output/
    expire_in: 1 week
  only:
    - branches
    - merge_requests

# Stage 4: Package Creation
package_zip:
  stage: package
  before_script:
    - pip install boto3
    - export ZIP_NAME="${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-$(date +%Y%m%d-%H%M%S).zip"
  script:
    - echo "Creating zip package: $ZIP_NAME"
    - python train-script/create_zip_package.py
        --zip-name $ZIP_NAME
        --commit-id $CI_COMMIT_SHORT_SHA
        --training-output training_output/
    - echo "Zip package created: $ZIP_NAME"
  artifacts:
    paths:
      - "*.zip"
    expire_in: 1 week
  dependencies:
    - train_model
  only:
    - branches
    - merge_requests

# Stage 5: Release Management
create_release:
  stage: release
  before_script:
    - pip install boto3
  script:
    - echo "Creating release..."
    - python train-script/send_notification.py
        --pipeline-status $CI_PIPELINE_STATUS
        --project-name $CI_PROJECT_NAME
        --pipeline-url $CI_PIPELINE_URL
    - echo "Release created successfully"
  dependencies:
    - package_zip
  when: always
  only:
    - branches
    - merge_requests